{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","utils/todoUtiles.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","getUserById","users","find","TodoInfo","todo","classNames","TodoList","todos","map","App","useState","todosFromServer","currentTodos","setCurrentTodos","newTitle","setNewTitle","titleValidation","setTitleValidation","newUserId","setNewUserId","userValidation","setUserValidation","action","method","onSubmit","event","preventDefault","trim","newTodo","Math","max","newTodoList","htmlFor","type","value","placeholder","onChange","input","target","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fff0e6ca.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\nexport interface Props {\n  user: User | null;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    user && (\n      <>\n        <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n          {user.name}\n        </a>\n      </>\n    )\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nexport const getNewPostId = (todos: Todo[]) => {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n};\n\nexport const getUserById = (users: User[], id: number): User | null => {\n  return users.find((user) => user.id === id) || null;\n};\n","import classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\nimport { getUserById } from '../../utils/todoUtiles';\nimport users from '../../api/users';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={\n        classNames('TodoInfo', { 'TodoInfo--completed': todo.completed })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo user={getUserById(users, todo.userId)} />\n\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\nexport interface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => <TodoInfo todo={todo} key={todo.id} />)}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { getNewPostId } from './utils/todoUtiles';\n\nexport const App = () => {\n  const [currentTodos, setCurrentTodos] = useState(todosFromServer);\n  const [newTitle, setNewTitle] = useState('');\n  const [titleValidation, setTitleValidation] = useState(false);\n  const [newUserId, setNewUserId] = useState(0);\n  const [userValidation, setUserValidation] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const input = event.target.value;\n\n    setTitleValidation(!input.trim());\n    setNewTitle(input);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const input = event.target.value;\n\n    setUserValidation(!input);\n    setNewUserId(+input);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setTitleValidation(!newTitle.trim());\n    setUserValidation(!newUserId);\n\n    if (!newTitle.trim() || !newUserId) {\n      return;\n    }\n\n    const newTodo = {\n      id: getNewPostId(currentTodos),\n      title: newTitle,\n      completed: false,\n      userId: newUserId,\n    };\n\n    const newTodoList = [...currentTodos, newTodo];\n\n    setCurrentTodos(newTodoList);\n\n    setNewTitle('');\n    setNewUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            value={newTitle}\n            placeholder=\"Enter a title\"\n            onChange={handleTitleChange}\n          />\n          {titleValidation\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={newUserId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\">Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userValidation\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}